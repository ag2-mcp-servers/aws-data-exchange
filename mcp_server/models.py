# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:28:35+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class ApiDescription(RootModel[str]):
    root: str


class Arn(RootModel[str]):
    root: str


class AssetName(RootModel[str]):
    root: str


class AssetType(Enum):
    S3_SNAPSHOT = 'S3_SNAPSHOT'
    REDSHIFT_DATA_SHARE = 'REDSHIFT_DATA_SHARE'
    API_GATEWAY_API = 'API_GATEWAY_API'
    S3_DATA_ACCESS = 'S3_DATA_ACCESS'
    LAKE_FORMATION_DATA_PERMISSION = 'LAKE_FORMATION_DATA_PERMISSION'


class AwsAccountId(
    RootModel[constr(pattern=r'.*/^[\d]{12}$/.*', min_length=12, max_length=12)]
):
    root: constr(pattern=r'.*/^[\d]{12}$/.*', min_length=12, max_length=12)


class CancelJobRequest(BaseModel):
    pass


class Code(Enum):
    ACCESS_DENIED_EXCEPTION = 'ACCESS_DENIED_EXCEPTION'
    INTERNAL_SERVER_EXCEPTION = 'INTERNAL_SERVER_EXCEPTION'
    MALWARE_DETECTED = 'MALWARE_DETECTED'
    RESOURCE_NOT_FOUND_EXCEPTION = 'RESOURCE_NOT_FOUND_EXCEPTION'
    SERVICE_QUOTA_EXCEEDED_EXCEPTION = 'SERVICE_QUOTA_EXCEEDED_EXCEPTION'
    VALIDATION_EXCEPTION = 'VALIDATION_EXCEPTION'
    MALWARE_SCAN_ENCRYPTED_FILE = 'MALWARE_SCAN_ENCRYPTED_FILE'


class ConflictException(RootModel[Any]):
    root: Any


class DatabaseLFTagPolicyPermission(Enum):
    DESCRIBE = 'DESCRIBE'


class DeleteAssetRequest(BaseModel):
    pass


class DeleteDataSetRequest(BaseModel):
    pass


class DeleteEventActionRequest(BaseModel):
    pass


class DeleteRevisionRequest(BaseModel):
    pass


class Description(RootModel[str]):
    root: str


class GetAssetRequest(BaseModel):
    pass


class GetDataSetRequest(BaseModel):
    pass


class GetEventActionRequest(BaseModel):
    pass


class GetJobRequest(BaseModel):
    pass


class GetRevisionRequest(BaseModel):
    pass


class Id(RootModel[str]):
    root: str


class ImportAssetFromSignedUrlJobErrorDetails(BaseModel):
    AssetName_1: AssetName = Field(..., alias='AssetName')


class InternalServerException(RootModel[Any]):
    root: Any


class JobErrorLimitName(Enum):
    Assets_per_revision = 'Assets per revision'
    Asset_size_in_GB = 'Asset size in GB'
    Amazon_Redshift_datashare_assets_per_revision = (
        'Amazon Redshift datashare assets per revision'
    )
    AWS_Lake_Formation_data_permission_assets_per_revision = (
        'AWS Lake Formation data permission assets per revision'
    )
    Amazon_S3_data_access_assets_per_revision = (
        'Amazon S3 data access assets per revision'
    )


class JobErrorResourceTypes(Enum):
    REVISION = 'REVISION'
    ASSET = 'ASSET'
    DATA_SET = 'DATA_SET'


class KmsKeyArn(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class KmsKeyToGrant(BaseModel):
    KmsKeyArn_1: KmsKeyArn = Field(..., alias='KmsKeyArn')


class LFPermission(Enum):
    DESCRIBE = 'DESCRIBE'
    SELECT = 'SELECT'


class LFResourceType(Enum):
    TABLE = 'TABLE'
    DATABASE = 'DATABASE'


class LakeFormationDataPermissionType(Enum):
    LFTagPolicy = 'LFTagPolicy'


class ListDataSetRevisionsRequest(BaseModel):
    pass


class ListDataSetsRequest(BaseModel):
    pass


class ListEventActionsRequest(BaseModel):
    pass


class ListJobsRequest(BaseModel):
    pass


class ListOfDatabaseLFTagPolicyPermissions(
    RootModel[List[DatabaseLFTagPolicyPermission]]
):
    root: List[DatabaseLFTagPolicyPermission]


class ListOfKmsKeysToGrant(RootModel[List[KmsKeyToGrant]]):
    root: List[KmsKeyToGrant] = Field(..., max_length=10, min_length=1)


class ListOfLFPermissions(RootModel[List[LFPermission]]):
    root: List[LFPermission]


class ListRevisionAssetsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1, le=200)]):
    root: conint(ge=1, le=200)


class Name(RootModel[str]):
    root: str


class NextToken(RootModel[str]):
    root: str


class Origin(Enum):
    OWNED = 'OWNED'
    ENTITLED = 'ENTITLED'


class ProtocolType(Enum):
    REST = 'REST'


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RevisionPublished(BaseModel):
    DataSetId: Id


class RoleArn(RootModel[constr(pattern=r'arn:aws:iam::(\d{12}):role\/.+')]):
    root: constr(pattern=r'arn:aws:iam::(\d{12}):role\/.+')


class ServerSideEncryptionTypes(Enum):
    aws_kms = 'aws:kms'
    AES256 = 'AES256'


class ServiceLimitExceededException(RootModel[Any]):
    root: Any


class StartJobRequest(BaseModel):
    pass


class StartJobResponse(BaseModel):
    pass


class State(Enum):
    WAITING = 'WAITING'
    IN_PROGRESS = 'IN_PROGRESS'
    ERROR = 'ERROR'
    COMPLETED = 'COMPLETED'
    CANCELLED = 'CANCELLED'
    TIMED_OUT = 'TIMED_OUT'


class String(RootModel[str]):
    root: str


class TableTagPolicyLFPermission(Enum):
    DESCRIBE = 'DESCRIBE'
    SELECT = 'SELECT'


class ThrottlingException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[datetime]):
    root: datetime


class Type(Enum):
    IMPORT_ASSETS_FROM_S3 = 'IMPORT_ASSETS_FROM_S3'
    IMPORT_ASSET_FROM_SIGNED_URL = 'IMPORT_ASSET_FROM_SIGNED_URL'
    EXPORT_ASSETS_TO_S3 = 'EXPORT_ASSETS_TO_S3'
    EXPORT_ASSET_TO_SIGNED_URL = 'EXPORT_ASSET_TO_SIGNED_URL'
    EXPORT_REVISIONS_TO_S3 = 'EXPORT_REVISIONS_TO_S3'
    IMPORT_ASSETS_FROM_REDSHIFT_DATA_SHARES = 'IMPORT_ASSETS_FROM_REDSHIFT_DATA_SHARES'
    IMPORT_ASSET_FROM_API_GATEWAY_API = 'IMPORT_ASSET_FROM_API_GATEWAY_API'
    CREATE_S3_DATA_ACCESS_FROM_S3_BUCKET = 'CREATE_S3_DATA_ACCESS_FROM_S3_BUCKET'
    IMPORT_ASSETS_FROM_LAKE_FORMATION_TAG_POLICY = (
        'IMPORT_ASSETS_FROM_LAKE_FORMATION_TAG_POLICY'
    )


class UntagResourceRequest(BaseModel):
    pass


class UpdateAssetRequest(BaseModel):
    Name: AssetName


class UpdateDataSetRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Name_1: Optional[Name] = Field(None, alias='Name')


class ValidationException(RootModel[Any]):
    root: Any


class FieldBoolean(RootModel[bool]):
    root: bool


class FieldDouble(RootModel[float]):
    root: float


class FieldDoubleMin0(RootModel[float]):
    root: float


class FieldString(RootModel[str]):
    root: str


class FieldStringMin0Max16384(RootModel[constr(min_length=0, max_length=16384)]):
    root: constr(min_length=0, max_length=16384)


class FieldStringMin10Max512(RootModel[constr(min_length=10, max_length=512)]):
    root: constr(min_length=10, max_length=512)


class FieldStringMin24Max24PatternAZaZ094AZaZ092AZaZ093(
    RootModel[
        constr(
            pattern=r'(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?',
            min_length=24,
            max_length=24,
        )
    ]
):
    root: constr(
        pattern=r'(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?',
        min_length=24,
        max_length=24,
    )


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, FieldString] = Field(
        ...,
        description='A label that consists of a customer-defined key and an optional value.',
    )


class TagKeys(RootModel[List[FieldString]]):
    root: List[FieldString]


class V1XAmznDataexchangeAssetIdXAmznDataexchangeDataSetIdXAmznDataexchangeRevisionIdPostRequest(
    BaseModel
):
    Body: Optional[str] = Field(None, description='The request body.')
    x_amzn_dataexchange_header_: Optional[Dict[str, FieldString]] = Field(
        None,
        alias='x-amzn-dataexchange-header-',
        description='Any header value prefixed with x-amzn-dataexchange-header- will have that stripped before sending the Asset API request. Use this when you want to override a header that AWS Data Exchange uses. Alternatively, you can use the header without a prefix to the HTTP request.',
    )


class QueryStringParameters(RootModel[Optional[Dict[str, FieldString]]]):
    root: Optional[Dict[str, FieldString]] = None


class V1DataSetsPostRequest(BaseModel):
    AssetType_1: AssetType = Field(
        ...,
        alias='AssetType',
        description='The type of asset that is added to a data set.',
    )
    Description: str = Field(
        ...,
        description='A description for the data set. This value can be up to 16,348 characters long.',
    )
    Name: str = Field(..., description='The name of the data set.')
    Tags: Optional[Dict[str, FieldString]] = Field(
        None,
        description='A data set tag is an optional label that you can assign to a data set when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to these data sets and revisions.',
    )


class V1DataSetsDataSetIdPatchRequest(BaseModel):
    Description: Optional[str] = Field(
        None, description='The description for the data set.'
    )
    Name: Optional[str] = Field(None, description='The name of the data set.')


class V1DataSetsDataSetIdRevisionsPostRequest(BaseModel):
    Comment: Optional[constr(min_length=0, max_length=16384)] = Field(
        None, description='An optional comment about the revision.'
    )
    Tags: Optional[Dict[str, FieldString]] = Field(
        None,
        description='A revision tag is an optional label that you can assign to a revision when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to these data sets and revisions.',
    )


class V1DataSetsDataSetIdRevisionsRevisionIdPatchRequest(BaseModel):
    Comment: Optional[constr(min_length=0, max_length=16384)] = Field(
        None, description='An optional comment about the revision.'
    )
    Finalized: Optional[bool] = Field(
        None,
        description="Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products.",
    )


class V1DataSetsDataSetIdRevisionsRevisionIdAssetsAssetIdPatchRequest(BaseModel):
    Name: str = Field(
        ...,
        description='The name of the asset. When importing from Amazon S3, the Amazon S3 object key is used as the asset name. When exporting to Amazon S3, the asset name is used as default target Amazon S3 object key. When importing from Amazon API Gateway API, the API name is used as the asset name. When importing from Amazon Redshift, the datashare name is used as the asset name. When importing from AWS Lake Formation, the static values of "Database(s) included in the LF-tag policy" or "Table(s) included in LF-tag policy" are used as the name.',
    )


class V1DataSetsDataSetIdRevisionsRevisionIdRevokePostRequest(BaseModel):
    RevocationComment: constr(min_length=10, max_length=512) = Field(
        ...,
        description='A required comment to inform subscribers of the reason their access to the revision was revoked.',
    )


class Event(BaseModel):
    RevisionPublished_1: Optional[RevisionPublished] = Field(
        None, alias='RevisionPublished'
    )


class ApiGatewayApiAsset(BaseModel):
    ApiDescription_1: Optional[ApiDescription] = Field(None, alias='ApiDescription')
    ApiEndpoint: Optional[FieldString] = None
    ApiId: Optional[FieldString] = None
    ApiKey: Optional[FieldString] = None
    ApiName: Optional[FieldString] = None
    ApiSpecificationDownloadUrl: Optional[FieldString] = None
    ApiSpecificationDownloadUrlExpiresAt: Optional[Timestamp] = None
    ProtocolType_1: Optional[ProtocolType] = Field(None, alias='ProtocolType')
    Stage: Optional[FieldString] = None


class AssetDestinationEntry(BaseModel):
    AssetId: Id
    Bucket: FieldString
    Key: Optional[FieldString] = None


class AssetSourceEntry(BaseModel):
    Bucket: FieldString
    Key: FieldString


class AutoExportRevisionDestinationEntry(BaseModel):
    Bucket: FieldString
    KeyPattern: Optional[FieldString] = None


class ExportAssetToSignedUrlRequestDetails(BaseModel):
    AssetId: Id
    DataSetId: Id
    RevisionId: Id


class ExportAssetToSignedUrlResponseDetails(BaseModel):
    AssetId: Id
    DataSetId: Id
    RevisionId: Id
    SignedUrl: Optional[FieldString] = None
    SignedUrlExpiresAt: Optional[Timestamp] = None


class ExportServerSideEncryption(BaseModel):
    KmsKeyArn: Optional[FieldString] = None
    Type: ServerSideEncryptionTypes


class ImportAssetFromApiGatewayApiRequestDetails(BaseModel):
    ApiDescription_1: Optional[ApiDescription] = Field(None, alias='ApiDescription')
    ApiId: FieldString
    ApiKey: Optional[FieldString] = None
    ApiName: FieldString
    ApiSpecificationMd5Hash: FieldStringMin24Max24PatternAZaZ094AZaZ092AZaZ093
    DataSetId: Id
    ProtocolType_1: ProtocolType = Field(..., alias='ProtocolType')
    RevisionId: Id
    Stage: FieldString


class ImportAssetFromApiGatewayApiResponseDetails(BaseModel):
    ApiDescription_1: Optional[ApiDescription] = Field(None, alias='ApiDescription')
    ApiId: FieldString
    ApiKey: Optional[FieldString] = None
    ApiName: FieldString
    ApiSpecificationMd5Hash: FieldStringMin24Max24PatternAZaZ094AZaZ092AZaZ093
    ApiSpecificationUploadUrl: FieldString
    ApiSpecificationUploadUrlExpiresAt: Timestamp
    DataSetId: Id
    ProtocolType_1: ProtocolType = Field(..., alias='ProtocolType')
    RevisionId: Id
    Stage: FieldString


class ImportAssetFromSignedUrlRequestDetails(BaseModel):
    AssetName_1: AssetName = Field(..., alias='AssetName')
    DataSetId: Id
    Md5Hash: FieldStringMin24Max24PatternAZaZ094AZaZ092AZaZ093
    RevisionId: Id


class ImportAssetFromSignedUrlResponseDetails(BaseModel):
    AssetName_1: AssetName = Field(..., alias='AssetName')
    DataSetId: Id
    Md5Hash: Optional[FieldStringMin24Max24PatternAZaZ094AZaZ092AZaZ093] = None
    RevisionId: Id
    SignedUrl: Optional[FieldString] = None
    SignedUrlExpiresAt: Optional[Timestamp] = None


class ListOfAssetDestinationEntry(RootModel[List[AssetDestinationEntry]]):
    root: List[AssetDestinationEntry]


class ListOfAssetSourceEntry(RootModel[List[AssetSourceEntry]]):
    root: List[AssetSourceEntry]


class ListOfLFTagValues(RootModel[List[String]]):
    root: List[String]


class ListOfTableTagPolicyLFPermissions(RootModel[List[TableTagPolicyLFPermission]]):
    root: List[TableTagPolicyLFPermission]


class ListOfString(RootModel[List[FieldString]]):
    root: List[FieldString]


class MapOfString(RootModel[Optional[Dict[str, FieldString]]]):
    root: Optional[Dict[str, FieldString]] = None


class OriginDetails(BaseModel):
    ProductId: FieldString


class RedshiftDataShareAsset(BaseModel):
    Arn: FieldString


class RedshiftDataShareAssetSourceEntry(BaseModel):
    DataShareArn: FieldString


class RevisionDestinationEntry(BaseModel):
    Bucket: FieldString
    KeyPattern: Optional[FieldString] = None
    RevisionId: Id


class RevisionEntry(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    Comment: Optional[FieldStringMin0Max16384] = None
    CreatedAt: Timestamp
    DataSetId: Id
    Finalized: Optional[FieldBoolean] = None
    Id_1: Id = Field(..., alias='Id')
    RevocationComment: Optional[FieldStringMin10Max512] = None
    Revoked: Optional[FieldBoolean] = None
    RevokedAt: Optional[Timestamp] = None
    SourceId: Optional[Id] = None
    UpdatedAt: Timestamp


class RevokeRevisionRequest(BaseModel):
    RevocationComment: FieldStringMin10Max512


class RevokeRevisionResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    Comment: Optional[FieldStringMin0Max16384] = None
    CreatedAt: Optional[Timestamp] = None
    DataSetId: Optional[Id] = None
    Finalized: Optional[FieldBoolean] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    RevocationComment: Optional[FieldStringMin10Max512] = None
    Revoked: Optional[FieldBoolean] = None
    RevokedAt: Optional[Timestamp] = None
    SourceId: Optional[Id] = None
    UpdatedAt: Optional[Timestamp] = None


class S3DataAccessAsset(BaseModel):
    Bucket: FieldString
    KeyPrefixes: Optional[ListOfString] = None
    Keys: Optional[ListOfString] = None
    KmsKeysToGrant: Optional[ListOfKmsKeysToGrant] = None
    S3AccessPointAlias: Optional[FieldString] = None
    S3AccessPointArn: Optional[FieldString] = None


class S3DataAccessAssetSourceEntry(BaseModel):
    Bucket: FieldString
    KeyPrefixes: Optional[ListOfString] = None
    Keys: Optional[ListOfString] = None
    KmsKeysToGrant: Optional[ListOfKmsKeysToGrant] = None


class S3SnapshotAsset(BaseModel):
    Size: FieldDoubleMin0


class SendApiAssetRequest(BaseModel):
    Body: Optional[FieldString] = None
    RequestHeaders: Optional[MapOfString] = None


class SendApiAssetResponse(BaseModel):
    Body: Optional[FieldString] = None
    ResponseHeaders: Optional[MapOfString] = None


class TagResourceRequest(BaseModel):
    Tags: MapOfString


class UpdateDataSetResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    AssetType_1: Optional[AssetType] = Field(None, alias='AssetType')
    CreatedAt: Optional[Timestamp] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name_1: Optional[Name] = Field(None, alias='Name')
    Origin_1: Optional[Origin] = Field(None, alias='Origin')
    OriginDetails_1: Optional[OriginDetails] = Field(None, alias='OriginDetails')
    SourceId: Optional[Id] = None
    UpdatedAt: Optional[Timestamp] = None


class UpdateRevisionRequest(BaseModel):
    Comment: Optional[FieldStringMin0Max16384] = None
    Finalized: Optional[FieldBoolean] = None


class UpdateRevisionResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    Comment: Optional[FieldStringMin0Max16384] = None
    CreatedAt: Optional[Timestamp] = None
    DataSetId: Optional[Id] = None
    Finalized: Optional[FieldBoolean] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    RevocationComment: Optional[FieldStringMin10Max512] = None
    Revoked: Optional[FieldBoolean] = None
    RevokedAt: Optional[Timestamp] = None
    SourceId: Optional[Id] = None
    UpdatedAt: Optional[Timestamp] = None


class AutoExportRevisionToS3RequestDetails(BaseModel):
    Encryption: Optional[ExportServerSideEncryption] = None
    RevisionDestination: AutoExportRevisionDestinationEntry


class CreateDataSetRequest(BaseModel):
    AssetType_1: AssetType = Field(..., alias='AssetType')
    Description_1: Description = Field(..., alias='Description')
    Name_1: Name = Field(..., alias='Name')
    Tags: Optional[MapOfString] = None


class CreateDataSetResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    AssetType_1: Optional[AssetType] = Field(None, alias='AssetType')
    CreatedAt: Optional[Timestamp] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name_1: Optional[Name] = Field(None, alias='Name')
    Origin_1: Optional[Origin] = Field(None, alias='Origin')
    OriginDetails_1: Optional[OriginDetails] = Field(None, alias='OriginDetails')
    SourceId: Optional[Id] = None
    Tags: Optional[MapOfString] = None
    UpdatedAt: Optional[Timestamp] = None


class CreateRevisionRequest(BaseModel):
    Comment: Optional[FieldStringMin0Max16384] = None
    Tags: Optional[MapOfString] = None


class CreateRevisionResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    Comment: Optional[FieldStringMin0Max16384] = None
    CreatedAt: Optional[Timestamp] = None
    DataSetId: Optional[Id] = None
    Finalized: Optional[FieldBoolean] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    RevocationComment: Optional[FieldStringMin10Max512] = None
    Revoked: Optional[FieldBoolean] = None
    RevokedAt: Optional[Timestamp] = None
    SourceId: Optional[Id] = None
    Tags: Optional[MapOfString] = None
    UpdatedAt: Optional[Timestamp] = None


class CreateS3DataAccessFromS3BucketRequestDetails(BaseModel):
    AssetSource: S3DataAccessAssetSourceEntry
    DataSetId: Id
    RevisionId: Id


class CreateS3DataAccessFromS3BucketResponseDetails(BaseModel):
    AssetSource: S3DataAccessAssetSourceEntry
    DataSetId: Id
    RevisionId: Id


class DataSetEntry(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    AssetType_1: AssetType = Field(..., alias='AssetType')
    CreatedAt: Timestamp
    Description_1: Description = Field(..., alias='Description')
    Id_1: Id = Field(..., alias='Id')
    Name_1: Name = Field(..., alias='Name')
    Origin_1: Origin = Field(..., alias='Origin')
    OriginDetails_1: Optional[OriginDetails] = Field(None, alias='OriginDetails')
    SourceId: Optional[Id] = None
    UpdatedAt: Timestamp


class Details(BaseModel):
    ImportAssetFromSignedUrlJobErrorDetails_1: Optional[
        ImportAssetFromSignedUrlJobErrorDetails
    ] = Field(None, alias='ImportAssetFromSignedUrlJobErrorDetails')
    ImportAssetsFromS3JobErrorDetails: Optional[ListOfAssetSourceEntry] = None


class ExportAssetsToS3RequestDetails(BaseModel):
    AssetDestinations: ListOfAssetDestinationEntry
    DataSetId: Id
    Encryption: Optional[ExportServerSideEncryption] = None
    RevisionId: Id


class ExportAssetsToS3ResponseDetails(BaseModel):
    AssetDestinations: ListOfAssetDestinationEntry
    DataSetId: Id
    Encryption: Optional[ExportServerSideEncryption] = None
    RevisionId: Id


class GetDataSetResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    AssetType_1: Optional[AssetType] = Field(None, alias='AssetType')
    CreatedAt: Optional[Timestamp] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name_1: Optional[Name] = Field(None, alias='Name')
    Origin_1: Optional[Origin] = Field(None, alias='Origin')
    OriginDetails_1: Optional[OriginDetails] = Field(None, alias='OriginDetails')
    SourceId: Optional[Id] = None
    Tags: Optional[MapOfString] = None
    UpdatedAt: Optional[Timestamp] = None


class GetRevisionResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    Comment: Optional[FieldStringMin0Max16384] = None
    CreatedAt: Optional[Timestamp] = None
    DataSetId: Optional[Id] = None
    Finalized: Optional[FieldBoolean] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    RevocationComment: Optional[FieldStringMin10Max512] = None
    Revoked: Optional[FieldBoolean] = None
    RevokedAt: Optional[Timestamp] = None
    SourceId: Optional[Id] = None
    Tags: Optional[MapOfString] = None
    UpdatedAt: Optional[Timestamp] = None


class ImportAssetsFromS3RequestDetails(BaseModel):
    AssetSources: ListOfAssetSourceEntry
    DataSetId: Id
    RevisionId: Id


class ImportAssetsFromS3ResponseDetails(BaseModel):
    AssetSources: ListOfAssetSourceEntry
    DataSetId: Id
    RevisionId: Id


class JobError(BaseModel):
    Code_1: Code = Field(..., alias='Code')
    Details_1: Optional[Details] = Field(None, alias='Details')
    LimitName: Optional[JobErrorLimitName] = None
    LimitValue: Optional[FieldDouble] = None
    Message: FieldString
    ResourceId: Optional[FieldString] = None
    ResourceType: Optional[JobErrorResourceTypes] = None


class LFTag(BaseModel):
    TagKey: String
    TagValues: ListOfLFTagValues


class ListOfDataSetEntry(RootModel[List[DataSetEntry]]):
    root: List[DataSetEntry]


class ListOfJobError(RootModel[List[JobError]]):
    root: List[JobError]


class ListOfLFTags(RootModel[List[LFTag]]):
    root: List[LFTag]


class ListOfRedshiftDataShareAssetSourceEntry(
    RootModel[List[RedshiftDataShareAssetSourceEntry]]
):
    root: List[RedshiftDataShareAssetSourceEntry]


class ListOfRevisionDestinationEntry(RootModel[List[RevisionDestinationEntry]]):
    root: List[RevisionDestinationEntry]


class ListOfRevisionEntry(RootModel[List[RevisionEntry]]):
    root: List[RevisionEntry]


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[MapOfString] = None


class TableLFTagPolicy(BaseModel):
    Expression: ListOfLFTags


class TableLFTagPolicyAndPermissions(BaseModel):
    Expression: ListOfLFTags
    Permissions: ListOfTableTagPolicyLFPermissions


class Action(BaseModel):
    ExportRevisionToS3: Optional[AutoExportRevisionToS3RequestDetails] = None


class V1EventActionsPostRequest(BaseModel):
    Action_1: Action = Field(
        ..., alias='Action', description='What occurs after a certain event.'
    )
    Event_1: Event = Field(
        ..., alias='Event', description='What occurs to start an action.'
    )


class V1EventActionsEventActionIdPatchRequest(BaseModel):
    Action_1: Optional[Action] = Field(
        None, alias='Action', description='What occurs after a certain event.'
    )


class CreateEventActionRequest(BaseModel):
    Action_1: Action = Field(..., alias='Action')
    Event_1: Event = Field(..., alias='Event')


class CreateEventActionResponse(BaseModel):
    Action_1: Optional[Action] = Field(None, alias='Action')
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedAt: Optional[Timestamp] = None
    Event_1: Optional[Event] = Field(None, alias='Event')
    Id_1: Optional[Id] = Field(None, alias='Id')
    UpdatedAt: Optional[Timestamp] = None


class DatabaseLFTagPolicy(BaseModel):
    Expression: ListOfLFTags


class DatabaseLFTagPolicyAndPermissions(BaseModel):
    Expression: ListOfLFTags
    Permissions: ListOfDatabaseLFTagPolicyPermissions


class EventActionEntry(BaseModel):
    Action_1: Action = Field(..., alias='Action')
    Arn_1: Arn = Field(..., alias='Arn')
    CreatedAt: Timestamp
    Event_1: Event = Field(..., alias='Event')
    Id_1: Id = Field(..., alias='Id')
    UpdatedAt: Timestamp


class ExportRevisionsToS3RequestDetails(BaseModel):
    DataSetId: Id
    Encryption: Optional[ExportServerSideEncryption] = None
    RevisionDestinations: ListOfRevisionDestinationEntry


class ExportRevisionsToS3ResponseDetails(BaseModel):
    DataSetId: Id
    Encryption: Optional[ExportServerSideEncryption] = None
    EventActionArn: Optional[FieldString] = None
    RevisionDestinations: ListOfRevisionDestinationEntry


class GetEventActionResponse(BaseModel):
    Action_1: Optional[Action] = Field(None, alias='Action')
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedAt: Optional[Timestamp] = None
    Event_1: Optional[Event] = Field(None, alias='Event')
    Id_1: Optional[Id] = Field(None, alias='Id')
    UpdatedAt: Optional[Timestamp] = None


class ImportAssetsFromLakeFormationTagPolicyRequestDetails(BaseModel):
    CatalogId: AwsAccountId
    DataSetId: Id
    Database: Optional[DatabaseLFTagPolicyAndPermissions] = None
    RevisionId: Id
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    Table: Optional[TableLFTagPolicyAndPermissions] = None


class ImportAssetsFromLakeFormationTagPolicyResponseDetails(BaseModel):
    CatalogId: AwsAccountId
    DataSetId: Id
    Database: Optional[DatabaseLFTagPolicyAndPermissions] = None
    RevisionId: Id
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    Table: Optional[TableLFTagPolicyAndPermissions] = None


class ImportAssetsFromRedshiftDataSharesRequestDetails(BaseModel):
    AssetSources: ListOfRedshiftDataShareAssetSourceEntry
    DataSetId: Id
    RevisionId: Id


class ImportAssetsFromRedshiftDataSharesResponseDetails(BaseModel):
    AssetSources: ListOfRedshiftDataShareAssetSourceEntry
    DataSetId: Id
    RevisionId: Id


class LFResourceDetails(BaseModel):
    Database: Optional[DatabaseLFTagPolicy] = None
    Table: Optional[TableLFTagPolicy] = None


class LFTagPolicyDetails(BaseModel):
    CatalogId: AwsAccountId
    ResourceDetails: LFResourceDetails
    ResourceType: LFResourceType


class LakeFormationDataPermissionDetails(BaseModel):
    LFTagPolicy: Optional[LFTagPolicyDetails] = None


class ListDataSetRevisionsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Revisions: Optional[ListOfRevisionEntry] = None


class ListDataSetsResponse(BaseModel):
    DataSets: Optional[ListOfDataSetEntry] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListOfEventActionEntry(RootModel[List[EventActionEntry]]):
    root: List[EventActionEntry]


class RequestDetails(BaseModel):
    CreateS3DataAccessFromS3Bucket: Optional[
        CreateS3DataAccessFromS3BucketRequestDetails
    ] = None
    ExportAssetToSignedUrl: Optional[ExportAssetToSignedUrlRequestDetails] = None
    ExportAssetsToS3: Optional[ExportAssetsToS3RequestDetails] = None
    ExportRevisionsToS3: Optional[ExportRevisionsToS3RequestDetails] = None
    ImportAssetFromApiGatewayApi: Optional[
        ImportAssetFromApiGatewayApiRequestDetails
    ] = None
    ImportAssetFromSignedUrl: Optional[ImportAssetFromSignedUrlRequestDetails] = None
    ImportAssetsFromLakeFormationTagPolicy: Optional[
        ImportAssetsFromLakeFormationTagPolicyRequestDetails
    ] = None
    ImportAssetsFromRedshiftDataShares: Optional[
        ImportAssetsFromRedshiftDataSharesRequestDetails
    ] = None
    ImportAssetsFromS3: Optional[ImportAssetsFromS3RequestDetails] = None


class ResponseDetails(BaseModel):
    CreateS3DataAccessFromS3Bucket: Optional[
        CreateS3DataAccessFromS3BucketResponseDetails
    ] = None
    ExportAssetToSignedUrl: Optional[ExportAssetToSignedUrlResponseDetails] = None
    ExportAssetsToS3: Optional[ExportAssetsToS3ResponseDetails] = None
    ExportRevisionsToS3: Optional[ExportRevisionsToS3ResponseDetails] = None
    ImportAssetFromApiGatewayApi: Optional[
        ImportAssetFromApiGatewayApiResponseDetails
    ] = None
    ImportAssetFromSignedUrl: Optional[ImportAssetFromSignedUrlResponseDetails] = None
    ImportAssetsFromLakeFormationTagPolicy: Optional[
        ImportAssetsFromLakeFormationTagPolicyResponseDetails
    ] = None
    ImportAssetsFromRedshiftDataShares: Optional[
        ImportAssetsFromRedshiftDataSharesResponseDetails
    ] = None
    ImportAssetsFromS3: Optional[ImportAssetsFromS3ResponseDetails] = None


class UpdateEventActionRequest(BaseModel):
    Action_1: Optional[Action] = Field(None, alias='Action')


class UpdateEventActionResponse(BaseModel):
    Action_1: Optional[Action] = Field(None, alias='Action')
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedAt: Optional[Timestamp] = None
    Event_1: Optional[Event] = Field(None, alias='Event')
    Id_1: Optional[Id] = Field(None, alias='Id')
    UpdatedAt: Optional[Timestamp] = None


class Details1(BaseModel):
    CreateS3DataAccessFromS3Bucket: Optional[
        CreateS3DataAccessFromS3BucketRequestDetails
    ] = None
    ExportAssetToSignedUrl: Optional[ExportAssetToSignedUrlRequestDetails] = None
    ExportAssetsToS3: Optional[ExportAssetsToS3RequestDetails] = None
    ExportRevisionsToS3: Optional[ExportRevisionsToS3RequestDetails] = None
    ImportAssetFromApiGatewayApi: Optional[
        ImportAssetFromApiGatewayApiRequestDetails
    ] = None
    ImportAssetFromSignedUrl: Optional[ImportAssetFromSignedUrlRequestDetails] = None
    ImportAssetsFromLakeFormationTagPolicy: Optional[
        ImportAssetsFromLakeFormationTagPolicyRequestDetails
    ] = None
    ImportAssetsFromRedshiftDataShares: Optional[
        ImportAssetsFromRedshiftDataSharesRequestDetails
    ] = None
    ImportAssetsFromS3: Optional[ImportAssetsFromS3RequestDetails] = None


class V1JobsPostRequest(BaseModel):
    Details: Details1 = Field(..., description='The details for the request.')
    Type_1: Type = Field(
        ..., alias='Type', description='The type of job to be created.'
    )


class CreateJobRequest(BaseModel):
    Details: RequestDetails
    Type_1: Type = Field(..., alias='Type')


class CreateJobResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedAt: Optional[Timestamp] = None
    Details: Optional[ResponseDetails] = None
    Errors: Optional[ListOfJobError] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    State_1: Optional[State] = Field(None, alias='State')
    Type_1: Optional[Type] = Field(None, alias='Type')
    UpdatedAt: Optional[Timestamp] = None


class GetJobResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedAt: Optional[Timestamp] = None
    Details: Optional[ResponseDetails] = None
    Errors: Optional[ListOfJobError] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    State_1: Optional[State] = Field(None, alias='State')
    Type_1: Optional[Type] = Field(None, alias='Type')
    UpdatedAt: Optional[Timestamp] = None


class JobEntry(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    CreatedAt: Timestamp
    Details: ResponseDetails
    Errors: Optional[ListOfJobError] = None
    Id_1: Id = Field(..., alias='Id')
    State_1: State = Field(..., alias='State')
    Type_1: Type = Field(..., alias='Type')
    UpdatedAt: Timestamp


class LakeFormationDataPermissionAsset(BaseModel):
    LakeFormationDataPermissionDetails_1: LakeFormationDataPermissionDetails = Field(
        ..., alias='LakeFormationDataPermissionDetails'
    )
    LakeFormationDataPermissionType_1: LakeFormationDataPermissionType = Field(
        ..., alias='LakeFormationDataPermissionType'
    )
    Permissions: ListOfLFPermissions
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class ListEventActionsResponse(BaseModel):
    EventActions: Optional[ListOfEventActionEntry] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListOfJobEntry(RootModel[List[JobEntry]]):
    root: List[JobEntry]


class AssetDetails(BaseModel):
    ApiGatewayApiAsset_1: Optional[ApiGatewayApiAsset] = Field(
        None, alias='ApiGatewayApiAsset'
    )
    LakeFormationDataPermissionAsset_1: Optional[LakeFormationDataPermissionAsset] = (
        Field(None, alias='LakeFormationDataPermissionAsset')
    )
    RedshiftDataShareAsset_1: Optional[RedshiftDataShareAsset] = Field(
        None, alias='RedshiftDataShareAsset'
    )
    S3DataAccessAsset_1: Optional[S3DataAccessAsset] = Field(
        None, alias='S3DataAccessAsset'
    )
    S3SnapshotAsset_1: Optional[S3SnapshotAsset] = Field(None, alias='S3SnapshotAsset')


class AssetEntry(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    AssetDetails_1: AssetDetails = Field(..., alias='AssetDetails')
    AssetType_1: AssetType = Field(..., alias='AssetType')
    CreatedAt: Timestamp
    DataSetId: Id
    Id_1: Id = Field(..., alias='Id')
    Name: AssetName
    RevisionId: Id
    SourceId: Optional[Id] = None
    UpdatedAt: Timestamp


class GetAssetResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    AssetDetails_1: Optional[AssetDetails] = Field(None, alias='AssetDetails')
    AssetType_1: Optional[AssetType] = Field(None, alias='AssetType')
    CreatedAt: Optional[Timestamp] = None
    DataSetId: Optional[Id] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name: Optional[AssetName] = None
    RevisionId: Optional[Id] = None
    SourceId: Optional[Id] = None
    UpdatedAt: Optional[Timestamp] = None


class ListJobsResponse(BaseModel):
    Jobs: Optional[ListOfJobEntry] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListOfAssetEntry(RootModel[List[AssetEntry]]):
    root: List[AssetEntry]


class ListRevisionAssetsResponse(BaseModel):
    Assets: Optional[ListOfAssetEntry] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class UpdateAssetResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    AssetDetails_1: Optional[AssetDetails] = Field(None, alias='AssetDetails')
    AssetType_1: Optional[AssetType] = Field(None, alias='AssetType')
    CreatedAt: Optional[Timestamp] = None
    DataSetId: Optional[Id] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name: Optional[AssetName] = None
    RevisionId: Optional[Id] = None
    SourceId: Optional[Id] = None
    UpdatedAt: Optional[Timestamp] = None
